package javac.parser;

import java.io.InputStream;
import javac.absyn.*;

action code {:
    static javac.symbol.Symbol sym(String s) {
        return javac.symbol.Symbol.valueOf(s);
    }
    
    static javac.util.Position pos(int line, int column) {
        return javac.util.Position.valueOf(line, column);
    }
:};

parser code {:
    public void reportError(String message, Object info) {
        final StringBuffer m = new StringBuffer("Parsing error");
        if (info instanceof java_cup.runtime.Symbol) {
            final java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s.left >= 0) {
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0) {
                    m.append(", column " + (s.right + 1));
                }
            }
        }
        m.append(" : " + message);
        System.err.println(m);
        System.exit(-1);
    }
    
    public void reportFatalError(String message, Object info) {
        reportError(message, info);
        System.exit(-1);
    }
    
    public Parser(InputStream inStream) {
        this(new Yylex(inStream));
    }
:};

terminal Integer    INTEGER;
terminal String     ID, STRING_LITERAL;
terminal Character  CHARACTER;
terminal NATIVE, RECORD, INT, STRING, CHAR, NEW, NULL, IF, ELSE, WHILE, FOR, RETURN, BREAK, CONTINUE, LRBRACKET, SEMICOLON, LBRACKET, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE, COMMA, ASSIGN, OR, AND, EQ, NEQ, LESS, LESS_EQ, GREATER, GREATER_EQ, PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, NOT, DOT;

non terminal TranslationUnit   translation_unit;
non terminal ExternalDecl      external_decl;
non terminal PrototypeDecl     prototype_decl;
non terminal FunctionDef       function_def;
non terminal RecordDef         record_def;
non terminal VariableDeclList  variable_decl_list;
non terminal FunctionHead      function_head;
non terminal ParameterList     parameter_list;
non terminal ParameterDecl     parameter_decl;
non terminal VariableDecl      variable_decl;
non terminal TypeSpecifier     type_specifier;
non terminal IdList            id_list;
non terminal StmtList          stmt_list;
non terminal Stmt              stmt, selection_stmt, iteration_stmt, jump_stmt;
non terminal ExprStmt          expr_stmt;
non terminal CompoundStmt      compound_stmt;
non terminal ArgumentList      argument_list;
non terminal Expr              expr, assignment_expr, logical_or_expr, logical_and_expr, equality_expr, relational_expr, additive_expr, mult_expr, unary_expr, postfix, primary;

precedence right  ELSE;
precedence left   LBRACKET;

start with translation_unit;

translation_unit ::= external_decl:e    {: RESULT = new TranslationUnit(pos(eleft, eright)); RESULT.add(e); :}
                   | translation_unit:t external_decl:e    {: RESULT = t; RESULT.add(e); :}
                   ;
external_decl ::= prototype_decl:e      {: RESULT = e; :}
                  | function_def:e      {: RESULT = e; :}
                  | record_def:e        {: RESULT = e; :}
                  ;
prototype_decl ::= NATIVE function_head:e SEMICOLON
                    {: RESULT = new PrototypeDecl(pos(eleft, eright), e); :}
                    ;
function_def ::= function_head:h LBRACE variable_decl_list:l stmt_list:t RBRACE
                    {: RESULT = new FunctionDef(pos(hleft, hright), h, l, t); :}
             | function_head:h LBRACE                    stmt_list:t RBRACE
                    {: RESULT = new FunctionDef(pos(hleft, hright), h, new VariableDeclList(pos(hleft, hright)), t); :}
             | function_head:h LBRACE variable_decl_list:l RBRACE
                    {: RESULT = new FunctionDef(pos(hleft, hright), h, l, new StmtList(pos(lleft, lright))); :}
             | function_head:h LBRACE  RBRACE
                    {: RESULT = new FunctionDef(pos(hleft, hright), h, new VariableDeclList(pos(hleft, hright)), new StmtList(pos(hleft, hright))); :}
                    ;
record_def ::= RECORD ID:e LBRACE variable_decl_list:t RBRACE
                {: RESULT = new RecordDef(pos(eleft, eright), sym(e), t); :}
                ;
variable_decl_list ::= variable_decl:e {: RESULT = new VariableDeclList(pos(eleft, eright));
                                          RESULT.add(e); :}
                      |variable_decl_list:t variable_decl:e {: RESULT = t; RESULT.add(e); :}
                      ;
function_head ::= type_specifier:t ID:e LPAREN parameter_list:l RPAREN
                    {: RESULT = new FunctionHead(pos(tleft, tright), t, sym(e), l); :}
                | type_specifier:t ID:e LPAREN RPAREN
                    {: RESULT = new FunctionHead(pos(tleft, tright), t, sym(e), new ParameterList(pos(eleft, eright))); :}
                ;
parameter_list ::= parameter_decl:e
                    {: RESULT = new ParameterList(pos(eleft, eright));
                       RESULT.add(e); :}
                ;
parameter_list ::= parameter_list:t COMMA parameter_decl:e
                    {: RESULT = t; t.add(e); :}
                ;

parameter_decl ::= type_specifier:t ID:e {: RESULT = new ParameterDecl(pos(eleft, eright), t, sym(e)); :}
                ;

variable_decl ::= type_specifier:t id_list:l SEMICOLON:e
                    {: RESULT = new VariableDecl(pos(tleft, tright), t, l); :}
                ;

type_specifier ::= INT:e
                    {: RESULT = new IntType(pos(eleft, eright)); :}
               | STRING:e
                    {: RESULT = new StringType(pos(eleft, eright)); :}
               | CHAR:e
                    {: RESULT = new CharType(pos(eleft, eright)); :}
               | ID:e
                    {: RESULT = new IdType(pos(eleft, eright), sym(e)); :}
                ;
type_specifier ::= type_specifier:t LRBRACKET
                    {: RESULT = new ArrayType(pos(tleft, tright), t); :}
                ;

id_list ::= ID:e {: RESULT = new IdList(pos(eleft, eright)); RESULT.add(sym(e)); :}
            ;
id_list ::= id_list:l COMMA ID:e {: RESULT = l; l.add(sym(e)); :}
            ;

stmt_list ::= stmt:e {: RESULT = new StmtList(pos(eleft, eright)); RESULT.add(e); :}
            ;
stmt_list ::= stmt_list:l stmt:e {: RESULT = l; l.add(e); :}
            ;

stmt ::= compound_stmt:e
        {: RESULT = e; :}
     | expr_stmt:e
        {: RESULT = e; :}
     | selection_stmt:e
        {: RESULT = e; :}
     | iteration_stmt:e
        {: RESULT = e; :}
     | jump_stmt:e
        {: RESULT = e; :}
    ;

compound_stmt ::= LBRACE:a stmt_list:e RBRACE:b
                {: RESULT = new CompoundStmt(pos(aleft, aright), e); :}
              | LBRACE:a           RBRACE:b
                {: RESULT = new CompoundStmt(pos(aleft, aright), new StmtList(pos(bleft, bright))); :}
            ;

expr_stmt ::= expr:e SEMICOLON
                {: RESULT = new ExprStmt(pos(eleft, eright), e); :}
            ;

selection_stmt ::= IF LPAREN expr:e RPAREN stmt:t
                {: RESULT = new IfStmt(pos(eleft, eright), e, t, null); :}
               | IF LPAREN expr:e RPAREN stmt:t ELSE stmt:s
                {: RESULT = new IfStmt(pos(eleft, eright), e, t, s); :}
            ;

iteration_stmt ::= WHILE:l LPAREN expr:e RPAREN stmt:t
                {: RESULT = new WhileStmt(pos(lleft, lright), e, t); :}
               | FOR:l LPAREN expr_stmt:a expr_stmt:b expr:c RPAREN stmt:t
                {: RESULT = new ForStmt(pos(lleft, lright), a.getExpr(), b.getExpr(), c, t); :}
               | FOR:l LPAREN expr_stmt:a expr_stmt:b      RPAREN stmt:t
                {: RESULT = new ForStmt(pos(lleft, lright), a.getExpr(), b.getExpr(), null, t); :}
               | FOR:l LPAREN expr_stmt:a SEMICOLON expr:c RPAREN stmt:t
                {: RESULT = new ForStmt(pos(lleft, lright), a.getExpr(), new IntLiteral(pos(aleft, aright), Integer.valueOf(1)), c, t); :}
               | FOR:l LPAREN expr_stmt:a SEMICOLON      RPAREN stmt:t
                {: RESULT = new ForStmt(pos(lleft, lright), a.getExpr(), new IntLiteral(pos(aleft, aright), Integer.valueOf(1)), null, t); :}
               | FOR:l LPAREN SEMICOLON expr_stmt:b expr:c RPAREN stmt:t
                {: RESULT = new ForStmt(pos(lleft, lright), null, b.getExpr(), c, t); :}
               | FOR:l LPAREN SEMICOLON expr_stmt:b      RPAREN stmt:t
                {: RESULT = new ForStmt(pos(lleft, lright), null, b.getExpr(), null, t); :}
               | FOR:l LPAREN SEMICOLON SEMICOLON expr:c RPAREN stmt:t
                {: RESULT = new ForStmt(pos(lleft, lright), null, new IntLiteral(pos(lleft, lright), Integer.valueOf(1)), c, t); :}
               | FOR:l LPAREN SEMICOLON SEMICOLON      RPAREN stmt:t
                {: RESULT = new ForStmt(pos(lleft, lright), null, new IntLiteral(pos(lleft, lright), Integer.valueOf(1)), null, t); :}
            ;

jump_stmt ::= RETURN expr:t SEMICOLON
            {: RESULT = new ReturnStmt(pos(tleft, tright), t); :}
          | BREAK:t SEMICOLON
            {: RESULT = new BreakStmt(pos(tleft, tright)); :}
          | CONTINUE:t SEMICOLON
            {: RESULT = new ContinueStmt(pos(tleft, tright)); :}
        ;

argument_list ::= assignment_expr:e {: RESULT = new ArgumentList(pos(eleft, eright)); RESULT.add(e); :}
                ;
argument_list ::= argument_list:l COMMA assignment_expr:e {: RESULT = l; RESULT.add(e); :}
                ;

expr ::= assignment_expr:e {: RESULT = e; :}
        ;
expr ::= expr:e1 COMMA:t assignment_expr:e2
            {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.COMMA, e2); :}
        ;

assignment_expr ::= logical_or_expr:e
                    {: RESULT = e; :}
                ;
assignment_expr ::= unary_expr:e1 ASSIGN:t assignment_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.ASSIGN, e2); :}
                ;

logical_or_expr ::= logical_and_expr:e
                    {: RESULT = e; :}
                ;
logical_or_expr ::= logical_or_expr:e1 OR:t logical_and_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.OR, e2); :}
                ;

logical_and_expr ::= equality_expr:e
                    {: RESULT = e; :}
                ;
logical_and_expr ::= logical_and_expr:e1 AND:t equality_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.AND, e2); :}
                ;

equality_expr ::= relational_expr:e
                    {: RESULT = e; :}
                ;
equality_expr ::= equality_expr:e1 EQ:t  relational_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.EQ, e2); :}
              | equality_expr:e1 NEQ:t relational_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.NEQ, e2); :}
                ;

relational_expr ::= additive_expr:e
                    {: RESULT = e; :}
                ;
relational_expr ::= relational_expr:e1 LESS:t       additive_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.LESS, e2); :}
                | relational_expr:e1 LESS_EQ:t    additive_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.LESS_EQ, e2); :}
                | relational_expr:e1 GREATER:t    additive_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.GREATER, e2); :}
                | relational_expr:e1 GREATER_EQ:t additive_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.GREATER_EQ, e2); :}
                ;

additive_expr ::= mult_expr:e
                    {: RESULT = e; :}
                ;
additive_expr ::= additive_expr:e1 PLUS:t  mult_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.PLUS, e2); :}
              | additive_expr:e1 MINUS:t mult_expr:e2
                    {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.MINUS, e2); :}
                ;

mult_expr ::= unary_expr:e
                {: RESULT = e; :}
            ;
mult_expr ::= mult_expr:e1 MULTIPLY:t unary_expr:e2
                {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.MULTIPLY, e2); :}
          | mult_expr:e1  DIVIDE:t  unary_expr:e2
                {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.DIVIDE, e2); :}
          | mult_expr:e1  MODULO:t  unary_expr:e2
                {: RESULT = new BinaryExpr(pos(e1left, e1right), e1, BinaryOp.MODULO, e2); :}
            ;

unary_expr ::= postfix:e
                {: RESULT = e; :}
            ;
unary_expr ::= PLUS:t  unary_expr:e
                {: RESULT = new UnaryExpr(pos(tleft, tright), UnaryOp.PLUS, e); :}
           | MINUS:t unary_expr:e
                {: RESULT = new UnaryExpr(pos(tleft, tright), UnaryOp.MINUS, e); :}
           | NOT:t   unary_expr:e
                {: RESULT = new UnaryExpr(pos(tleft, tright), UnaryOp.NOT, e); :}
            ;

postfix ::= primary:e
            {: RESULT = e; :}
        ;
postfix ::= postfix:e1 LBRACKET expr:e2 RBRACKET
            {: RESULT = new SubscriptPostfix(pos(e1left, e1right), e1, e2); :}
        | postfix:e1 LPAREN argument_list:e2 RPAREN
            {: RESULT = new FunctionCall(pos(e1left, e1right), e1, e2); :}
        | postfix:e LPAREN      RPAREN
            {: RESULT = new FunctionCall(pos(eleft, eright), e, new ArgumentList(pos(eleft, eright))); :}
        | postfix:e1 DOT ID:e2
            {: RESULT = new FieldPostfix(pos(e1left, e1right), e1, sym(e2)); :}
        ;

primary ::= ID:e
            {: RESULT = new Id(pos(eleft, eright), sym(e)); :}
        | NULL:e
            {: RESULT = new Null(pos(eleft, eright)); :}
        | INTEGER:e
            {: RESULT = new IntLiteral(pos(eleft, eright), Integer.valueOf(e)); :}
        | CHARACTER:e
            {: RESULT = new CharLiteral(pos(eleft, eright), e); :}
        | STRING_LITERAL:e
            {: RESULT = new StringLiteral(pos(eleft, eright), e); :}
        | LPAREN expr:e RPAREN
            {: RESULT = e; :}
        | NEW type_specifier:t LBRACKET expr:e RBRACKET
            {: RESULT = new NewArray(pos(tleft, tright), t, e); :}
        | NEW type_specifier:t
            {: RESULT = new NewRecord(pos(tleft, tright), t); :}
        ;
