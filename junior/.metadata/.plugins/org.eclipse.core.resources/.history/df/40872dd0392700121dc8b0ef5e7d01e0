package nachos.threads;

import java.util.LinkedList;

/**
 * A <i>communicator</i> allows threads to synchronously exchange 32-bit
 * messages. Multiple threads can be waiting to <i>speak</i>, and multiple
 * threads can be waiting to <i>listen</i>. But there should never be a time
 * when both a speaker and a listener are waiting, because the two threads can
 * be paired off at this point.
 */
public class Communicator {
	/**
	 * Allocate a new communicator.
	 */
	public Communicator() {
		transferLock = new Lock();
		listenerQueue = new LinkedList<KThread>();
		listenerQueue = new LinkedList<KThread>();
	}

	/**
	 * Wait for a thread to listen through this communicator, and then transfer
	 * <i>word</i> to the listener.
	 * 
	 * <p>
	 * Do not return until this thread is paired up with a listening thread.
	 * Exactly one listener should receive <i>word</i>.
	 * 
	 * @param word
	 *            the integer to transfer.
	 */
	public void speak(int word) {
		transferLock.acquire();
		transferLock.release();
		KThread.sleep();
	}

	/**
	 * Wait for a thread to speak through this communicator, and then return the
	 * <i>word</i> that thread passed to <tt>speak()</tt>.
	 * 
	 * @return the integer transferred.
	 */
	public int listen() {
		int ret = 0;
		transferLock.acquire();
		transferLock.release();
		return ret;
	}
	
	//private boolean wordSet;
	private int storedWord;
	private KThread listener, speaker;
	private LinkedList<KThread> listenerQueue, speakerQueue;
	private Lock transferLock;
}
